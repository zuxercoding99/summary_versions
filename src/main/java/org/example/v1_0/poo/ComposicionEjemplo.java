package org.example.v1_0.poo;

// -------------------------------------------
// Principio: "Preferir Composici√≥n sobre Herencia"
// La composici√≥n permite reutilizar comportamiento
// delegando en otros objetos en lugar de heredarlo,
// aumentando flexibilidad y reduciendo acoplamiento.

// 1Ô∏è‚É£ Interfaces de comportamiento (contratos)
interface Loginable {
    void login();
}

interface AdminActions {
    void deleteUser();

    void banUser();
}

// 2Ô∏è‚É£ Implementaciones concretas
class BasicLogin implements Loginable {
    public void login() {
        System.out.println("Usuario logueado con autenticaci√≥n b√°sica");
    }
}

class OAuthLogin implements Loginable {
    public void login() {
        System.out.println("Usuario logueado con OAuth");
    }
}

class AdminTools implements AdminActions {
    public void deleteUser() {
        System.out.println("Usuario eliminado");
    }

    public void banUser() {
        System.out.println("Usuario baneado");
    }
}

// 3Ô∏è‚É£ Clases usando COMPOSICI√ìN (has-a)
class Guest {
    private Loginable login;

    public Guest(Loginable login) {
        this.login = login;
    }

    public void login() {
        login.login(); // delegaci√≥n
    }
}

class RegularUser {
    private Loginable login;

    public RegularUser(Loginable login) {
        this.login = login;
    }

    public void login() {
        login.login(); // delegaci√≥n
    }
}

class SuperUser {
    private Loginable login;
    private AdminActions adminActions;

    public SuperUser(Loginable login, AdminActions adminActions) {
        this.login = login;
        this.adminActions = adminActions;
    }

    public void login() {
        login.login(); // delegaci√≥n
    }

    public void deleteUser() {
        adminActions.deleteUser();
    }

    public void banUser() {
        adminActions.banUser();
    }
}

// 4Ô∏è‚É£ Ejemplo de uso en main
public class ComposicionEjemplo {
    public static void main(String[] args) {
        // Guest solo puede loguearse
        Guest guest = new Guest(new BasicLogin());
        guest.login();

        // RegularUser con otro tipo de login
        RegularUser user = new RegularUser(new OAuthLogin());
        user.login();

        // SuperUser con login + herramientas admin
        SuperUser superUser = new SuperUser(new BasicLogin(), new AdminTools());
        superUser.login();
        superUser.deleteUser();
        superUser.banUser();
    }
}

/*
 * -------------------------------------------------
 * üìå COMPOSICI√ìN VS HERENCIA
 * 
 * HERENCIA (is-a):
 * - Subclase hereda TODOS los m√©todos de la superclase.
 * - Ejemplo: class Car extends Vehicle
 * - Problema: acoplamiento fuerte, subclases heredan cosas que no necesitan.
 * 
 * COMPOSICI√ìN (has-a):
 * - Clase contiene otros objetos y delega en ellos.
 * - Ejemplo: class Car { Engine motor; }
 * - Ventaja: reutiliza solo lo necesario, implementaciones intercambiables.
 * 
 * Regla pr√°ctica:
 * ‚û° Usa herencia solo en jerarqu√≠as estables con clara relaci√≥n "es un".
 * ‚û° Usa composici√≥n cuando quieras flexibilidad y bajo acoplamiento.
 * -------------------------------------------------
 */
